using System.Collections.Generic;
using com.cozyhome.Vectors;
using UnityEngine;

public class BooleanGJK {

    public struct ConvexPolyhedron {
        private Vector3[] points;
        private Matrix4x4 m;

        public ConvexPolyhedron(Vector3[] points, Matrix4x4 t_m) {
            this.points = points;
            this.m = t_m;
        }

        private Vector3 GetVertex(int i) => m.MultiplyPoint(points[i]);

        public Vector3 Support(Vector3 dir) { // maximize dot between vert and dir
            var max   = float.NegativeInfinity;
            var max_d = Vector3.zero;
            
            for(int i = 0;i < points.Length;i++) {
                var v = GetVertex(i);
                var d = VectorHeader.Dot(v, dir);
                if(d > max) {
                    max   = d;
                    max_d = v;
                }
            }

            return max_d;
        }

        public Vector3 Origin => m.GetColumn(3);
    }

    public static bool Same(Vector3 v1, Vector3 v2) {
        return VectorHeader.Dot(v1, v2) > 0;
    }

    public static bool GJK(in ConvexPolyhedron a, in ConvexPolyhedron b) {
        List<Vector3> splx = new List<Vector3>();
        (Vector3 p, Vector3 p1, Vector3 p2) S = Support(a, b, a.Origin - b.Origin);
        var D = -S.p;

        count = 0;
        int iterat = 100;
        splx.Add(S.p);

        bool isCloseEnough(List<Vector3> splx, Vector3 p) {
            for(int i = 0;i < splx.Count;i++) {
                if((splx[i] - p).magnitude < 0.01F) {
                    return true;
                }
            }
            return false;
        }

        var V = S.p;

        while(iterat-- > 0 && true) {
            count++;
            var (A, B, C) = Support(a, b, D);
            
            // NUMERICALLY UNSTABLE EXIT CONDITION:
            // this basically determines that our support point discovered is not in the direction of D.
            // im not entirely sure if this is the same as determining if a duplicate support point was
            // discovered or not.

            float dd = Vector3.Dot(V, V); 
            // if(dd + Vector3.Dot(A, V) <= dd * 0.0001F /*!Same(A, D)*/) {
            if(
                isCloseEnough(splx, A) ||
                dd - Vector3.Dot(A, V) <= dd * 0.0001F) {
                // call closest point algorithm on simplex?
                // Debug.Log("Simplex: " + splx.Count + " " + count + " " + V.magnitude);
                Debug.Log(V.magnitude + " ");
                return false;
            }
            else { 
                splx.Insert(0, A);
                
                if(DoSimplex(ref D, ref V, splx)) {
                    return true;
                }
                else {
                    // if(count == stopat) {
                    //     Gizmos.color = Color.cyan;
                    //     Gizmos.DrawLine(V, Vector3.zero);
                    //     // Debug.Log(V + " " + count);
                    //     Gizmos.color = Color.cyan;
                    // }
                }
            }
        }

        Debug.Log("it: " + (count));
        return false;
    }

    static int count = 0;
    public static int stopat = 1;

    public static bool DoSimplex(ref Vector3 D, ref Vector3 V, List<Vector3> splx) {
        // potential 0D -> 1D simplex
        if(splx.Count == 2) {
            if(count == stopat) {
                Gizmos.color = Color.white;
                Gizmos.DrawLine(splx[0], splx[1]);
            }

            return Simplex1D(ref D, ref V, splx);
        }
        // potential 1D -> 2D simplex generation
        else if(splx.Count == 3) { 
            if(count == stopat) {
                Vector3 a = splx[0];
                Vector3 b = splx[1];
                Vector3 c = splx[2];

                Gizmos.color = Color.magenta;
                Gizmos.DrawLine(a, b);
                Gizmos.DrawLine(b, c);
                Gizmos.DrawLine(c, a);    

                Gizmos.DrawWireSphere(a, .125F);    
                Gizmos.DrawWireSphere(b, .125F);    
                Gizmos.DrawWireSphere(c, .125F);    
                Gizmos.color = Color.white;
            }

            return Simplex2D(ref D, ref V, splx);
        }
        // potential 2D -> 3D simplex generation
        else if(splx.Count == 4) {
            if(count == stopat) {
                Color draw = count == stopat ? Color.white : Color.black;
                float radi = count == stopat ? 0.125F : 0.25F;
                Gizmos.color = draw;
                Vector3 a = splx[0];
                Vector3 b = splx[1];
                Vector3 c = splx[2];
                Vector3 d = splx[3];
        
                Gizmos.DrawLine(a, b);
                Gizmos.DrawLine(a, c);
                Gizmos.DrawLine(a, d);
                
                Gizmos.DrawLine(b, c);
                Gizmos.DrawLine(c, d);
                Gizmos.DrawLine(d, b);

                Gizmos.color = Color.red; // d
                Gizmos.DrawWireSphere(d, radi);
                Gizmos.color = Color.blue; // c 
                Gizmos.DrawWireSphere(c, radi);
                Gizmos.color = Color.green; // b
                Gizmos.DrawWireSphere(b, radi);
                Gizmos.color = Color.yellow; // a
                Gizmos.DrawWireSphere(a, radi);
                Gizmos.color = draw;

                Vector3 abc = Vector3.Cross(b - a, c - a);
                Vector3 acd = Vector3.Cross(c - a, d - a);
                Vector3 adb = Vector3.Cross(d - a, b - a);
                Vector3 dcb = Vector3.Cross(c - d, b - c);
                
                Vector3 centroid_abc = (a + b + c) / 3;
                Vector3 centroid_acd = (a + c + d) / 3;
                Vector3 centroid_adb = (a + d + b) / 3;                
                
                // normals
                abc.Normalize();
                acd.Normalize();
                adb.Normalize();
                dcb.Normalize();
                Gizmos.DrawLine(centroid_abc, centroid_abc + abc * 3.0F);
                Gizmos.DrawLine(centroid_acd, centroid_acd + acd * 3.0F);
                Gizmos.DrawLine(centroid_adb, centroid_adb + adb * 3.0F);
            }
            return Simplex3D(ref D, ref V, splx);
        }
        return false; // never should reach
    }

    public static bool Simplex1D(ref Vector3 D, ref Vector3 V, List<Vector3> splx) {
        Vector3 a = splx[0];
        Vector3 b = splx[1];

        Vector3 ab = b - a;
        Vector3 ao =   - a;

        if(Same(ab, ao)) {
            // splx is not modified
            D = Vector3.Cross(Vector3.Cross(ab, ao), ab);
        }
        else {
            // splx is now just A, search is now in ao
            splx.Clear();
            splx.Add(a);
            D = ao;
        }

        var (v1, v2) = VectorHeader.ClosestPointEdge((a, b), Vector3.zero);
        V = v2 - v1;

        return false;
    }

    public static bool Simplex2D(ref Vector3 D, ref Vector3 V, List<Vector3> splx) {
        Vector3 a = splx[0];
        Vector3 b = splx[1];
        Vector3 c = splx[2];

        Vector3 ab = b - a;
        Vector3 ac = c - a;
        Vector3 ao =   - a;

        Vector3 abc = Vector3.Cross(ab, ac);
        
        if(Same(Vector3.Cross(abc, ac), ao)) {
            if(Same(ac, ao)) {
                // AC
                splx.Clear();
                splx.Add(a);
                splx.Add(c);
                D = Vector3.Cross(Vector3.Cross(ac, ao), ac);

                var (v1, v2) = VectorHeader.ClosestPointEdge(
                    (a, c),
                    Vector3.zero
                );
                V = v2 - v1;

            } else {
                if(Same(ab, ao)) {
                    // AB
                    splx.Clear();
                    splx.Add(a);
                    splx.Add(b);
                    D = Vector3.Cross(Vector3.Cross(ab, ao), ab);

                    var (v1, v2) = VectorHeader.ClosestPointEdge(
                        (a, b),
                        Vector3.zero
                    );
                    V = v2 - v1;

                } else {
                    // A
                    splx.Clear();
                    splx.Add(a);
                    D = ao;
                    V = a;
                }
            }
        } else {
            if(Same(Vector3.Cross(ab, abc), ao)) {
                if(Same(ab, ao)) {
                    // AB
                    splx.Clear();
                    splx.Add(a);
                    splx.Add(b);
                    D = Vector3.Cross(Vector3.Cross(ab, ao), ab);
                    
                    var (v1, v2) = VectorHeader.ClosestPointEdge(
                        (a, b),
                        Vector3.zero
                    );
                    V = v2 - v1;
                }else {
                    // A
                    splx.Clear();
                    splx.Add(a);
                    D = ao;
                    V = a;
                }
            } else {
                if(Same(abc, ao)) {
                    // ABC
                    D = abc;
                    
                    var (v1, v2) = VectorHeader.ClosestPointTriangle(
                        (a, b, c),
                        Vector3.zero
                    );
                    V = v2 - v1;
                } else {
                    // NEGABC
                    splx.Clear();
                    splx.Add(c);
                    splx.Add(b);
                    splx.Add(a);
                    D = -abc;

                    var (v1, v2) = VectorHeader.ClosestPointTriangle(
                        (a, b, c),
                        Vector3.zero
                    );
                    V = v2 - v1;
                }
            }
        }
        return false; // not done building the simplex!
    }

    public static bool Simplex3D(ref Vector3 D, ref Vector3 V, List<Vector3> splx) {
        Vector3 a = splx[0];
        Vector3 b = splx[1];
        Vector3 c = splx[2];
        Vector3 d = splx[3];

        Vector3 ao = - a;

        Vector3 abc = Vector3.Cross(b - a, c - a);
        Vector3 acd = Vector3.Cross(c - a, d - a);
        Vector3 adb = Vector3.Cross(d - a, b - a);
        
        if(Same(abc, ao)) {
            if(Same(acd, ao)) {
                if(Same(adb, ao)) {
                    // A
                    splx.Clear();
                    splx.Add(a);
                    D = ao;
                    V = a;

                    return false;
                } else {
                    //AC
                    splx.Clear();
                    splx.Add(a);
                    splx.Add(c);
                    D = Vector3.Cross(Vector3.Cross(c - a, ao), c - a);
                    
                    var (v1, v2) = VectorHeader.ClosestPointEdge(
                        (a, c),
                        Vector3.zero
                    );
                    V = v2 - v1;

                    return false;
                }
            } else {
                if(Same(adb, ao)) {
                    // AB
                    splx.Clear();
                    splx.Add(a);
                    splx.Add(b);
                    D = Vector3.Cross(Vector3.Cross(b - a, ao), b - a);

                    var (v1, v2) = VectorHeader.ClosestPointEdge(
                        (a, b),
                        Vector3.zero
                    );
                    V = v2 - v1;

                    return false;
                } else {
                    // ABC
                    splx.Clear();
                    splx.Add(a);
                    splx.Add(b);
                    splx.Add(c);
                    D = abc;

                    var(v1, v2) = VectorHeader.ClosestPointTriangle(
                        (a,b,c),
                        Vector3.zero
                    );

                    V = v2 - v1;
                    return false;
                }
            }
        } else {
            if(Same(acd, ao)) {
                if(Same(adb, ao)) {
                    // AD
                    splx.Clear();
                    splx.Add(a);
                    splx.Add(d);
                    D = Vector3.Cross(Vector3.Cross(d - a, ao), d - a);

                    var (v1, v2) = VectorHeader.ClosestPointEdge(
                        (a, d),
                        Vector3.zero
                    );
                    V = v2 - v1;

                    return false;
                } else {
                    // ACD
                    splx.Clear();
                    splx.Add(a);
                    splx.Add(c);
                    splx.Add(d);
                    D = acd;

                    var(v1, v2) = VectorHeader.ClosestPointTriangle(
                        (a,c,d),
                        Vector3.zero
                    );
                    V = v2 - v1;

                    return false;
                }
            } else {
                if(Same(adb, ao)) {
                    // ADB
                    splx.Clear();
                    splx.Add(a);
                    splx.Add(d);
                    splx.Add(b);
                    D = adb;
                    var(v1, v2) = VectorHeader.ClosestPointTriangle(
                        (a,d,b),
                        Vector3.zero
                    );

                    V = v2 - v1;
                    return false;
                }
                else {
                    V = Vector3.zero;
                    return true;
                }
            }
        }
    }
    
    public static (Vector3, Vector3, Vector3) Support(
            in ConvexPolyhedron a,
            in ConvexPolyhedron b,
            Vector3 D) {
                Vector3 _point_a = a.Support(D);
                Vector3 _point_b = b.Support(-D);
            return (_point_a - _point_b, _point_a, _point_b); 

    }
}